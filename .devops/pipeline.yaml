trigger: none

resources:
  pipelines:
  - pipeline: renew
    source: web.temporal.internal.dev.p4pa.pagopa.it
    trigger: 
      branches:
        include: 
        - test-pipeline
  
pool:
  vmImage: ubuntu-latest

jobs:
- job: ReadVariableFromSourcePipeline
  steps:
  - download: renew
    artifact: force_renew_cert_variable

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.10'

  - script: |
      echo "Installing required packages..."
      python -m pip install requests

  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        import json
        import requests

        import requests
        import shutil
        
        def download_file(url):
            local_filename = url.split('/')[-1]
            with requests.get(url, stream=True) as r:
                with open(local_filename, 'wb') as f:
                    shutil.copyfileobj(r.raw, f)
            return local_filename        
        
        response = requests.get("https://api.github.com/repos/pagopa/certdiff/releases/latest")
        if response.status_code == 200:
          wheel = response.json()["assets"][0]['browser_download_url']
          download_file(wheel)
        else:
          raise("Unable to download wheel file from repository...")

  - script: |
      pip install $(ls -1 certdiff*)
      certdiff --help

      FORCE_RENEW_CERT=$(cat $(Pipeline.Workspace)/renew/force_renew_cert_variable/force_renew_cert_variable.txt)
      echo "FORCE_RENEW_CERT: $FORCE_RENEW_CERT"

  - task: AzureCLI@2
    name: GetCertificatesFromKeyVault
    inputs:
      azureSubscription: "$(KEY_VAULT_SERVICE_CONNECTION)"
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az keyvault secret download --file stable.pfx --encoding base64 --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME_STABLE)'  >/dev/null
        az keyvault secret download --file current.pfx --encoding base64 --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME)' >/dev/null
        
        openssl pkcs12 -in stable.pfx -nodes -nokeys -passin pass: -out stable.pem
        openssl pkcs12 -in current.pfx -nodes -nokeys -passin pass: -out current.pem
                
        awk 'BEGIN {c=0;} /-----BEGIN CERTIFICATE-----/ {c++; filename="stable" c ".pem"} {if (filename) print > filename}' stable.pem
        awk 'BEGIN {c=0;} /-----BEGIN CERTIFICATE-----/ {c++; filename="current" c ".pem"} {if (filename) print > filename}' current.pem

        openssl x509 -in stable2.pem -noout -text | grep 'CA Issuers' | cut -d ':' -f2,3 | xargs curl -o stable_root.der
        openssl x509 -in current2.pem -noout -text | grep 'CA Issuers' | cut -d ':' -f2,3 | xargs curl -o current_root.der
        
        openssl x509 -inform DER -in stable_root.der -out stable_root.pem
        openssl x509 -inform DER -in current_root.der -out current_root.pem
        
        cat stable.pem stable_root.pem > stable_chain.pem
        cat current.pem current_root.pem > current_chain.pem
        
        certdiff --verbose --old stable_chain.pem --new current_chain.pem --report-json report.json

