trigger: none

resources:
  pipelines:
  - pipeline: renew
    source: web.temporal.internal.dev.p4pa.pagopa.it
    trigger: 
      branches:
        include: 
        - test-pipeline
  
pool:
  vmImage: ubuntu-latest

jobs:
- job: GetCert
  steps:
  - download: renew
    artifact: force_renew_cert_variable

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.10'

  - script: |
      echo "Installing required packages..."
      python -m pip install requests

  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        import json
        import requests

        import requests
        import shutil
        
        def download_file(url):
            local_filename = url.split('/')[-1]
            with requests.get(url, stream=True) as r:
                with open(local_filename, 'wb') as f:
                    shutil.copyfileobj(r.raw, f)
            return local_filename        
        
        response = requests.get("https://api.github.com/repos/pagopa/certdiff/releases/latest")
        if response.status_code == 200:
          wheel = response.json()["assets"][0]['browser_download_url']
          download_file(wheel)
        else:
          raise("Unable to download wheel file from repository...")

  - script: |
      pip install $(ls -1 certdiff*)
      certdiff --help

  - task: AzureCLI@2
    name: GetCertificatesFromKeyVault
    inputs:
      azureSubscription: "$(KEY_VAULT_SERVICE_CONNECTION)"
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        
        # Extract Force variable
        FORCE_RENEW_CERT=$(cat $(Pipeline.Workspace)/renew/force_renew_cert_variable/force_renew_cert_variable.txt)
        echo "FORCE_RENEW_CERT: $FORCE_RENEW_CERT"
        
        az keyvault secret download --file stable.pfx --encoding base64 --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME_STABLE)'  >/dev/null
        az keyvault secret download --file current.pfx --encoding base64 --vault-name '$(KEY_VAULT_NAME)' --name '$(KEY_VAULT_CERT_NAME)' >/dev/null
        
        for name in stable current; do
          if [[ ! -f "$name.pfx" ]]; then
              echo "❗File $name.pfx not found. Skipping..."
              exit 1
          fi
        
          # Extract certificates from .pfx (without private keys)
          echo "🔐 Extracting certificates from $name.pfx"
          openssl pkcs12 -in "$name.pfx" -nodes -nokeys -passin pass: -out "$name.pem"
          
          # Split multiple certificates into separate file
          echo "📂 Splitting certificates into individual files"                
          
          awk "BEGIN {c=0;} /-----BEGIN CERTIFICATE-----/ {c++; filename=\"${name}\" c \".pem\"} {if (filename) print > filename}" "$name.pem"
          if [[ ! -f "${name}2.pem" ]]; then
              echo "❗ ${name}2.pem not found. Skipping..."
              exit 1
          fi
    
          # Convert root certificate from DER to PEM
          echo "🔁 Converting DER → PEM"
          openssl x509 -in ${name}2.pem -noout -text | grep 'CA Issuers' | cut -d ':' -f2,3 | xargs curl -s -o ${name}_root.der
          
          openssl x509 -inform DER -in ${name}_root.der -out ${name}_root.pem
          
          cat ${name}.pem ${name}_root.pem > ${name}_chain.pem
        done

  - task: AzureCLI@2
    condition: succeeded()
    name: CompareCert
    inputs:
      azureSubscription: "$(KEY_VAULT_SERVICE_CONNECTION)"
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        certdiff --verbose --old stable_chain.pem --new current_chain.pem --report-json report.json

  - task: PythonScript@0
    name: SendMail
    condition: failed()
    env:
      APP_PASS: $(APP_PASS)
    inputs:
      scriptSource: 'inline'
      script: |
        import email, smtplib, ssl
        from email import encoders 
        from email.mime.base import MIMEBase
        from email.mime.multipart import MIMEMultipart
        from email.mime.text import MIMEText
        from os import getenv
        
        subject = "An email with attachment from Python"
        body = "This is an email with attachment sent from Python"
        sender_email = "fabio.felici@pagopa.it"
        receiver_email = "umberto.coppolabottazzi@pagopa.it" 
        password = getenv("APP_PASS")
        print(password)
        
        # Create a multipart message and set headers
        message = MIMEMultipart()
        message["From"] = sender_email
        message["To"] = receiver_email
        message["Subject"] = subject
        message["Bcc"] = receiver_email
        
        # Add body to email
        message.attach(MIMEText(body, "plain"))
        
        filename = "current_chain.pem" 

        # Open PDF file in binary mode
        with open(filename, "rb") as attachment:
            # Add file as application/octet-stream
            # Email client can usually download this automatically as attachment
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())
        
        # Encode file in ASCII characters to send by email    
        encoders.encode_base64(part)
        
        # Add header as key/value pair to attachment part
        part.add_header(
            "Content-Disposition",
            f"attachment; filename= {filename}",
        )
        
        # Add attachment to message and convert message to string
        message.attach(part)
        text = message.as_string()
        
        # Log in to server using secure context and send email
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(sender_email, password)
            server.sendmail(sender_email, receiver_email, text)
