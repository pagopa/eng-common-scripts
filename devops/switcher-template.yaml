trigger: none
pr: none

variables:
  TIME_OUT: 10
  CLUSTER_NAME: '$(TF_CLUSTER_NAME)'
  ACTION: '$(TF_ACTION)'
  USER_NODE_COUNT: '$(TF_USER_NODE_COUNT)'
  SYSTEM_NODE_COUNT: '$(TF_SYSTEM_NODE_COUNT)'
  CLUSTER_RG: '$(TF_CLUSTER_RG)'
  AZURE_SERVICE_CONNECTION_NAME: '$(TF_AZURE_SERVICE_CONNECTION_NAME)'
  AZURE_DEVOPS_POOL_AGENT_NAME: '$(TF_AZURE_DEVOPS_POOL_AGENT_NAME)'


pool:
  vmImage: 'ubuntu-latest'


stages:
  - stage: 'switcher'
    displayName: '‚èØÔ∏èÔ∏è switcher_${{variables.ACTION}}'
    dependsOn: []
    condition: succeeded()
    pool:
      name: ${{variables.AZURE_DEVOPS_POOL_AGENT_NAME}}
    jobs:
      - job: "switcher"
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - task: AzureCLI@2
            displayName: "‚èØÔ∏è trigger switcher with action ${{ variables.ACTION }}"
            inputs:
              azureSubscription: '${{ variables.AZURE_SERVICE_CONNECTION_NAME }}'
              addSpnToEnvironment: true
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              failOnStandardError: true
              inlineScript: |
                echo "üíà scaling node pools in ${{ variables.CLUSTER_NAME }}"
                
                clusters=$(az aks nodepool list --cluster-name ${{ variables.CLUSTER_NAME }} --resource-group ${{ variables.CLUSTER_RG }} | jq '.[] | {name: .name, mode: .mode}')

                user_clusters=$(echo "$clusters" | jq -r 'select(.mode == "User") | .name')
                system_clusters=$(echo "$clusters" | jq -r 'select(.mode == "System") | .name')

                system_node_count=${{ variables.SYSTEM_NODE_COUNT }}
                user_node_count=${{ variables.USER_NODE_COUNT }}

                IFS=',' read -ra sys_counts <<< "$system_node_count"
                sys_min_nodes=${sys_counts[0]}
                sys_max_nodes=${sys_counts[1]}
                if [ -z "$sys_max_nodes" ]
                then
                      sys_max_nodes=$sys_min_nodes
                fi

                IFS=',' read -ra usr_counts <<< "$user_node_count"
                usr_min_nodes=${usr_counts[0]}
                usr_max_nodes=${usr_counts[1]}
                if [ -z "$usr_max_nodes" ]
                then
                      usr_max_nodes=$usr_min_nodes
                fi

                if [ "${{ variables.ACTION }}" == "start" ]
                then
                  echo "‚ñ∂Ô∏è SCALE UP"

                  while IFS= read -r line; do
                    echo "‚¨ÜÔ∏è INFO Scaling up node pool: $line"
                    autoscaling_enabled=$(az aks nodepool show --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} | jq -r '.enableAutoScaling')
                    if [ "$autoscaling_enabled" == "true" ]
                    then
                      echo "‚ö†Ô∏è  WARN  autoscaling already enabled on $line. updating counts"
                      scale_up=$(az aks nodepool update --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} --update-cluster-autoscaler --max-count $usr_max_nodes --min-count $usr_min_nodes)
                    else
                      scale_up=$(az aks nodepool update --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} --enable-cluster-autoscaler --max-count $usr_max_nodes --min-count $usr_min_nodes)
                    fi
                    
                  done <<< "$user_clusters"

                  while IFS= read -r line; do
                    echo "‚¨ÜÔ∏è INFO Scaling up node pool: $line"
                    autoscaling_enabled=$(az aks nodepool show --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} | jq -r '.enableAutoScaling')
                    if [ "$autoscaling_enabled" == "true" ]
                    then
                      echo "‚ö†Ô∏è WARN Autoscaling already enabled on $line. updating counts"
                      scale_up=$(az aks nodepool update --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} --update-cluster-autoscaler --max-count $sys_max_nodes --min-count $sys_min_nodes)
                    else
                      scale_up=$(az aks nodepool update --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} --enable-cluster-autoscaler --max-count $sys_max_nodes --min-count $sys_min_nodes)
                    fi
                  done <<< "$system_clusters"

                else
                  echo "‚èπÔ∏è SCALE DOWN"
                  while IFS= read -r line; do
                    echo "‚¨áÔ∏è INFO Scaling down node pool: $line"
                    autoscaling_enabled=$(az aks nodepool show --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} | jq -r '.enableAutoScaling')
                    if [ "$autoscaling_enabled" == "false" ]
                    then
                      echo "‚ö†Ô∏è WARN  autoscaling already disabled on $line. updating count"
                      scale_down=$(az aks nodepool scale --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} -c $usr_min_nodes)
                    else
                      disable_as=$(az aks nodepool update --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} --disable-cluster-autoscaler)
                      scale_down=$(az aks nodepool scale --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} -c $usr_min_nodes)
                    fi
                    
                  done <<< "$user_clusters"

                  while IFS= read -r line; do
                    echo "‚¨áÔ∏è INFO Scaling down node pool: $line"
                    autoscaling_enabled=$(az aks nodepool show --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} | jq -r '.enableAutoScaling')
                    if [ "$autoscaling_enabled" == "false" ]
                    then
                      echo "‚ö†Ô∏è WARN  autoscaling already disabled on $line. updating count"
                      scale_down=$(az aks nodepool scale --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} -c $sys_min_nodes)
                    else
                      disable_as=$(az aks nodepool update --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} --disable-cluster-autoscaler)
                      scale_down=$(az aks nodepool scale --cluster-name ${{ variables.CLUSTER_NAME }} -n $line -g ${{ variables.CLUSTER_RG }} -c $sys_min_nodes)
                    fi
                  done <<< "$system_clusters"
                fi


